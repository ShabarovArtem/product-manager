package org.example.entity.repository;

import org.example.entity.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
/*
Аннотация @Repository в Spring Framework является специализированным стереотипом аннотации @Component.
Она используется для индикации того, что аннотированный класс является компонентом репозитория,
 который отвечает за взаимодействие с источником данных и управление персистентными (то есть долгосрочными, сохраняемыми) данными.
  Вот основные аспекты и преимущества использования аннотации @Repository:

1. Автоматическое обнаружение бинов
Spring автоматически сканирует и обнаруживает бины, аннотированные как @Repository,
 что позволяет вам избежать необходимости явного объявления каждого репозитория в конфигурационных файлах.

2. Обработка исключений
Одна из ключевых особенностей использования @Repository заключается в её способности автоматически перехватывать исключения,
 специфичные для платформы хранения данных (например, исключения SQL),
 и переводить их в более общие исключения Spring DataAccessException. Это облегчает обработку ошибок,
  так как исключения становятся независимыми от конкретной технологии хранения данных.

3. Логическое разделение кода
Использование @Repository позволяет чётко разделять слой постоянного хранения данных от бизнес-логики и контроллера в приложении.
Это улучшает организацию кода и упрощает его тестирование.
 */
@Repository
public interface ProductRepository extends JpaRepository<Product,Long> { //Long тип id в базе данных
    /*
    Наследование от JpaRepository в Spring Data JPA является стандартным способом для создания интерфейса репозитория,
     который обеспечивает богатый набор функциональностей для работы с сущностями в базе данных.
    Вот основные причины, по которым репозиторий наследуется от JpaRepository:

1. Предоставление стандартных методов CRUD
JpaRepository включает в себя все базовые методы для операций создания,
чтения, обновления и удаления (CRUD) данных. Это означает, что разработчики могут использовать эти методы
 без необходимости реализации собственного кода для каждой операции.
  Например, методы save(), findById(), findAll(), deleteById() и другие уже включены.
     */


}
